imports:
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Wrk/wrk.yml
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Bombardier/bombardier.yml
  - https://github.com/aspnet/Benchmarks/blob/main/scenarios/aspnet.profiles.yml?raw=true

jobs:

  nodejs:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/JavaScript/nodejs/nodejs.dockerfile
      dockerImageName: nodejs
      dockerContextDirectory: frameworks/JavaScript/nodejs/
    readyStateText: NodeJS worker listening
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  actix_default: # json and plaintext scenarios
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Rust/actix/actix.dockerfile
      dockerImageName: actix_default
      dockerContextDirectory: frameworks/Rust/actix/
    readyStateText: Started http server
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  actix_http: # db scenarios are in another image
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Rust/actix/actix-http.dockerfile
      dockerImageName: actix_http
      dockerContextDirectory: frameworks/Rust/actix/
    readyStateText: Starting http server
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  fasthttp:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Go/fasthttp/fasthttp-prefork.dockerfile
      dockerImageName: fasthttp_prefork
      dockerContextDirectory: frameworks/Go/fasthttp/
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  ulib:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerContextDirectory: frameworks/C++/ulib/
      dockerImageName: ulib
    # readyStateText: Started http server
    port: 8080
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  netty:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Java/netty/netty.dockerfile
      dockerImageName: netty
      dockerContextDirectory: frameworks/Java/netty/
    readyStateText: Httpd started
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  wizzardo:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: frameworks/Java/wizzardo-http/wizzardo-http.dockerfile
      dockerImageName: wizzardo
      dockerContextDirectory: frameworks/Java/wizzardo-http/
    arguments: --add-host="tfb-database:{{databaseServer}}"
    noClean: true

  postgresql:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: toolset/databases/postgres/postgres.dockerfile
      dockerImageName: postgres_te
      dockerContextDirectory: toolset/databases/postgres
    readyStateText: ready to accept connections
    noClean: true

  mysql:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: toolset/databases/mysql/mysql.dockerfile
      dockerImageName: mysql_te
      dockerContextDirectory: toolset/databases/mysql
    readyStateText: ready for connections
    noClean: true

scenarios:

  # NodeJS
  plaintext_nodejs:
    db:
      # nodejs image requires mysql to be available
      job: mysql
    application:
      job: nodejs
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_nodejs:
    db:
      # nodejs image requires mysql to be available
      job: mysql
    application:
      job: nodejs
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_nodejs:
    db:
      job: mysql
    application:
      job: nodejs
    load:
      job: bombardier
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # Actix (Rust)
  plaintext_actix:
    application:
      job: actix_default
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_actix:
    application:
      job: actix_default
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_actix:
    db:
      job: postgresql
    application:
      job: actix_http
    load:
      job: bombardier
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # FastHttp (Go)
  plaintext_fasthttp:
    db:
      job: postgresql
    application:
      job: fasthttp
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_fasthttp:
    db:
      job: postgresql
    application:
      job: fasthttp
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_fasthttp:
    db:
      job: postgresql
    application:
      job: fasthttp
    load:
      job: bombardier
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080

  # Ulib (C++)
  plaintext_ulib:
    application:
      job: ulib
      source:
          dockerFile: frameworks/C++/ulib/ulib.dockerfile
          dockerImageName: ulib_plaintext
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_ulib:
    application:
      job: ulib
      source:
          dockerFile: frameworks/C++/ulib/ulib-json.dockerfile
          dockerImageName: ulib_json
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  fortunes_ulib:
    db:
      job: postgresql
    application:
      job: ulib
      source:
          dockerFile: frameworks/C++/ulib/ulib-postgres.dockerfile
          dockerImageName: ulib_postgres
    load:
      job: bombardier
      variables:
        presetHeaders: html
        path: /fortune
        serverPort: 8080

  # Netty (Java)
  plaintext_netty:
    application:
      job: netty
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080

  json_netty:
    application:
      job: netty
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080

  # Wizzardo (Java)
  plaintext_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        serverPort: 8080
        connections: 1024

  json_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /json
        serverPort: 8080
        connections: 512

  fortunes_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: bombardier
      variables:
        presetHeaders: html
        path: /fortunes
        serverPort: 8080
        connections: 512

  single_query_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /db
        serverPort: 8080
        connections: 512
  
  multiple_queries_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /queries?queries=20
        serverPort: 8080

  updates_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /updates?queries=20
        serverPort: 8080

  cached_queries_wizzardo:
    db:
      job: postgresql
    application:
      job: wizzardo
    load:
      job: bombardier
      variables:
        presetHeaders: json
        path: /cached-worlds?count=100
        serverPort: 8080
